<template name="app-piano">
  <div>
    <div class="piano">
      {this.data.pianoKeys.map((item)=>{return(
      <div class="piano-key">
        <div data-type="white" ref={e=>{ this[item.white.name] = e }} class="piano-key__white"
          onClick={this.playNote.bind(this,item.white.name)} data-key={item.white.keyCode}
          data-note={item.white.name}>
          <span class="piano-note">{item.white.name}</span>
          <audio preload="auto" src={this.data.notes[item.white.name]} hidden='true' data-note={item.white.name}
            class='audioEle'></audio>
        </div>
        <div data-type="black" ref={e=>{ this[item.black.name] = e }} style={{
          display: item.black.name ? 'block' : 'none'
        }} class="piano-key__black" onClick={this.playNote.bind(this,item.black.name)} data-key={item.black.keyCode}
          data-note={item.black.name}>
          <span class="piano-note" style="color:#fff">{item.black.name}</span>
          <audio preload="auto" src={this.data.notes[item.white.name]} hidden='true' data-note={item.white.name}
            class='audioEle'></audio>
        </div>
      </div>
      )})}
    </div>
    <o-button onClick={this.playSong.bind(this,moon)} style='margin-top:20px; width:280px;'>点击弹奏：月亮代表我的心</o-button>
    <o-button onClick={this.playSong.bind(this,fuji)} style='margin-top:20px; width:280px;'>点击弹奏：富士山下&爱情转移</o-button>
    <!-- <o-button onClick={this.playSong.bind(this,later)} style='margin-top:20px; width:280px;'>点击弹奏：后来</o-button> -->
  </div>
</template>
<script>
  import notes from './notes.js'
  // 演示：月亮代表我的心
  import moon from './songs/moon.js'
  // 演示：富士山下
  import fuji from './songs/fuji.js'
  // 后来
  import later from './songs/later.js'
  import 'omiu/button'
  export default class {
    install() {
      this.data = {
        // 琴音，所有音符的播放地址
        notes: notes,
        pianoKeys: []
      }
      // 存放钢琴的按键顺序
      let pianoKeys = [];
      [2, 3, 4, 5, 6].map((item) => {
        pianoKeys = pianoKeys.concat([{
          white: {
            name: `C${item}`,
            keyCode: 49
          },
          black: {
            name: `C#${item}`,
            keyCode: 81
          }
        }, {
          white: {
            name: `D${item}`,
            keyCode: 50
          },
          black: {
            name: `D#${item}`,
            keyCode: 87
          }
        }, {
          white: {
            name: `E${item}`,
            keyCode: 51
          },
          black: {
            name: null,
            keyCode: null
          }
        }, {
          white: {
            name: `F${item}`,
            keyCode: 52
          },
          black: {
            name: `F#${item}`,
            keyCode: 69
          }
        }, {
          white: {
            name: `G${item}`,
            keyCode: 53
          },
          black: {
            name: `G#${item}`,
            keyCode: 82
          }
        }, {
          white: {
            name: `A${item}`,
            keyCode: 54
          },
          black: {
            name: `A#${item}`,
            keyCode: 84
          }
        }, {
          white: {
            name: `B${item}`,
            keyCode: 55
          },
          black: {
            name: null,
            keyCode: null
          }
        }])
      })
      this.data.pianoKeys = pianoKeys;
      this.data.notes = notes;
      document.onkeydown = (event) => {
        console.log(event)
        var e = event || window.event || arguments.callee.caller.arguments[0];
        let playNote = (key) => {
          if (e.shiftKey === true) {
            this.playNote(`${key}2`)
          } else if (e.altKey === true) {
            this.playNote(`${key}5`)
          } else if (e.ctrlKey === true) {
            this.playNote(`${key}3`)
          } else if (e.metaKey === true) {
            this.playNote(`${key}6`)
            e.returnValue = false;
          } else {
            this.playNote(`${key}4`)
          }
        }
        if (e && 49 <= e.keyCode && e.keyCode <= 55) {
          switch (e.keyCode) {
            case 49:
              playNote('C')
              break;
            case 50:
              playNote('D')
              break;
            case 51:
              playNote('E')
              break;
            case 52:
              playNote('F')
              break;
            case 53:
              playNote('G')
              break;
            case 54:
              playNote('A')
              break;
            case 55:
              playNote('B')
              break;
          }
        }
        if (e && (81 === e.keyCode || e.keyCode === 87 || e.keyCode === 69 || e.keyCode === 82 || e.keyCode === 84)) {
          switch (e.keyCode) {
            case 81:
              playNote('C#')
              break;
            case 87:
              playNote('D#')
              break;
            case 69:
              playNote('F#')
              break;
            case 82:
              playNote('G#')
              break;
            case 84:
              playNote('A#')
              break;
          }
        }
      };
    }
    playNote(name) {
      let audio = this[name].childNodes[1]
      this[name].style.background = `linear-gradient(-30deg, #616161, #fff)`
      let timer = setTimeout(() => {
        // console.log(this[name].getAttribute('data-type'))
        this[name].getAttribute('data-type') === 'white' ? this[name].style.background = `linear-gradient(-30deg, #f8f8f8, #fff)` : this[name].style.background = `linear-gradient(-20deg, #222, #000, #222)`
        clearInterval(timer)
      }, 1000)
      audio.currentTime = 0;
      audio.play();
    }

    playSong(song) {
      let offset = 0
      let time = 0
      let playSong = async () => {
        if (offset < song.length) {
          switch (typeof song[offset]) {
            // 简谱2演奏方法 根据 ++12345--6. 简单旋律情况
            case 'string':
              time = this.handleObject(song, offset)
              break;
            // 简谱1演奏方法 根据 CDEFGAB，复杂旋律情况，比如有和弦
            case 'object':
              console.log(song[offset]['note'])
              time = song[offset]['time'];
              this.playNote(song[offset]['note'])
              break;
          }
          await new Promise((resolve) => {
            let timer = setTimeout(() => {
              clearInterval(timer)
              resolve()
            }, time)
          })
          offset++
          playSong()
        } else {
          return;
        }
      }
      playSong()
    }

    handleObject(song, offset) {
      // 处理字母结果 CDEFG
      let letter = song[offset].match(/[0-9]/g)[0]
      // 处理 --7 判断有多少个-
      let subKey = song[offset].split('-').length - 1
      // 处理 ++7 判断有多少个+
      let addKey = song[offset].split('+').length - 1
      // 处理 7.. 判断有多少个.
      let pointKey = song[offset].split('.').length - 1
      let note;
      let key;
      let time;
      switch (letter) {
        case '1':
          note = 'C'
          break;
        case '2':
          note = 'D'
          break;
        case '3':
          note = 'E'
          break;
        case '4':
          note = 'F'
          break;
        case '5':
          note = 'G'
          break;
        case '6':
          note = 'A'
          break;
        case '7':
          note = 'B'
          break;
      }
      switch (subKey) {
        case 0:
          key = 4
          break;
        case 1:
          key = 3
          break;
        case 2:
          key = 2
          break;
      }
      switch (addKey) {
        case 0:
          key = 4
          break;
        case 1:
          key = 5
          break;
        case 2:
          key = 6
          break;
      }
      switch (pointKey) {
        case 0:
          time = 500
          break;
        case 1:
          time = 1000
          break;
        case 2:
          time = 1500
          break;
      }
      console.log(note + key)
      this.playNote(`${note + key}`)
      return time
    }
    // 录音
    recordSong() { }
  }
</script>
<style>
  * {
    margin: 0;
    padding: 0;
  }

  .piano {
    background: linear-gradient(-65deg, #000, #222, #000, #666, #222 75%);
    border-top: .8rem solid #282828;
    -webkit-box-shadow: inset 0 -1px 1px hsla(0, 0%, 100%, .5), inset -0.4rem 0.4rem #282828;
    box-shadow: inset 0 -1px 1px hsla(0, 0%, 100%, .5), inset -0.4rem 0.4rem #282828;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    height: 80vh;
    height: 60vh;
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    justify-content: center;
    overflow: hidden;
    padding-bottom: 5%;
    padding-left: 2.5%;
    padding-right: 2.5%;
  }

  .piano-key {
    color: blue;
    -webkit-box-flex: 1;
    -ms-flex: 1;
    flex: 1;
    margin: 0 .1rem;
    max-width: 8.8rem;
    position: relative;
  }

  .piano-key__white {
    display: flex;
    flex-direction: column-reverse;
    background: linear-gradient(-30deg, #f8f8f8, #fff);
    -webkit-box-shadow: inset 0 1px 0 #fff, inset 0 -1px 0 #fff, inset 1px 0 0 #fff, inset -1px 0 0 #fff, 0 4px 3px rgba(0, 0, 0, .7), inset 0 -1px 0 #fff, inset 1px 0 0 #fff, inset -1px -1px 15px rgba(0, 0, 0, .5), -3px 4px 6px rgba(0, 0, 0, .5);
    box-shadow: inset 0 1px 0 #fff, inset 0 -1px 0 #fff, inset 1px 0 0 #fff, inset -1px 0 0 #fff, 0 4px 3px rgba(0, 0, 0, .7), inset 0 -1px 0 #fff, inset 1px 0 0 #fff, inset -1px -1px 15px rgba(0, 0, 0, .5), -3px 4px 6px rgba(0, 0, 0, .5);
    height: 100%;
    position: relative;
  }

  .piano-key__black {
    display: flex;
    flex-direction: column-reverse;
    background: linear-gradient(-20deg, #222, #000, #222);
    -webkit-box-shadow: inset 0 -1px 2px hsla(0, 0%, 100%, .4), 0 2px 3px rgba(0, 0, 0, .4);
    box-shadow: inset 0 -1px 2px hsla(0, 0%, 100%, .4), 0 2px 3px rgba(0, 0, 0, .4);
    border-width: .2rem .4rem 1.2rem;
    border-style: solid;
    border-color: #666 #222 #111 #555;
    height: 60%;
    left: 100%;
    position: absolute;
    -webkit-transform: translateX(-50%);
    transform: translateX(-50%);
    top: 0;
    width: 70%;
    z-index: 1;
  }

  .piano-note {
    color: #000;
    font-size: 8px;
    text-align: center;
    height: 20px;
  }
</style>